// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniProjectApp.Context;

#nullable disable

namespace MiniProjectApp.Migrations
{
    [DbContext(typeof(LibraryManagementContext))]
    [Migration("20240527005536_fourth")]
    partial class fourth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MiniProjectApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Leo",
                            Category = "Thriller",
                            Description = "xyz",
                            Title = "Ben 10"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Ralph",
                            Category = "Education",
                            Description = "xyz",
                            Title = "Aerodynamics"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Stan Lee",
                            Category = "Comic",
                            Description = "xyz",
                            Title = "Spiderman"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Cart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("UserId", "BookId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MiniProjectApp.Models.CurrentSale", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<double>("PricePerBook")
                        .HasColumnType("float");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("CurrentSale");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            PricePerBook = 30.0,
                            QuantityInStock = 10
                        },
                        new
                        {
                            BookId = 2,
                            PricePerBook = 50.0,
                            QuantityInStock = 5
                        },
                        new
                        {
                            BookId = 3,
                            PricePerBook = 10.0,
                            QuantityInStock = 10
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MiniProjectApp.Models.UserCredential", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserCredentials");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Cart", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany("SuperCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.CurrentSale", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MiniProjectApp.Models.UserCredential", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.User", b =>
                {
                    b.Navigation("SuperCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
