// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MiniProjectApp.Context;

#nullable disable

namespace MiniProjectApp.Migrations
{
    [DbContext(typeof(LibraryManagementContext))]
    [Migration("20240709180659_ten")]
    partial class ten
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("MiniProjectApp.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Mockingbird Lane",
                            AuthorName = "Harper Lee",
                            Phone = "123-456-7890"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Big Brother St",
                            AuthorName = "George Orwell",
                            Phone = "234-567-8901"
                        },
                        new
                        {
                            Id = 3,
                            Address = "789 Gatsby Ave",
                            AuthorName = "F. Scott Fitzgerald",
                            Phone = "345-678-9012"
                        },
                        new
                        {
                            Id = 4,
                            Address = "101 Moby Dock Rd",
                            AuthorName = "Herman Melville",
                            Phone = "456-789-0123"
                        },
                        new
                        {
                            Id = 5,
                            Address = "202 Pride Blvd",
                            AuthorName = "Jane Austen",
                            Phone = "567-890-1234"
                        },
                        new
                        {
                            Id = 6,
                            Address = "303 Catcher St",
                            AuthorName = "J.D. Salinger",
                            Phone = "678-901-2345"
                        },
                        new
                        {
                            Id = 7,
                            Address = "404 Hobbiton Ln",
                            AuthorName = "J.R.R. Tolkien",
                            Phone = "789-012-3456"
                        },
                        new
                        {
                            Id = 8,
                            Address = "505 Brave New World Blvd",
                            AuthorName = "Aldous Huxley",
                            Phone = "890-123-4567"
                        },
                        new
                        {
                            Id = 9,
                            Address = "606 War and Peace Dr",
                            AuthorName = "Leo Tolstoy",
                            Phone = "901-234-5678"
                        },
                        new
                        {
                            Id = 10,
                            Address = "707 Alchemist Ave",
                            AuthorName = "Paulo Coelho",
                            Phone = "012-345-6789"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<double>("AvgRating")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            AvgRating = 0.0,
                            Category = "Fiction",
                            Description = "A novel about the serious issues of rape and racial inequality.",
                            PublisherId = 1,
                            RatingCount = 0,
                            Title = "To Kill a Mockingbird"
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            AvgRating = 0.0,
                            Category = "Dystopian",
                            Description = "A story set in a totalitarian society ruled by Big Brother.",
                            PublisherId = 2,
                            RatingCount = 0,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            AvgRating = 0.0,
                            Category = "Classic",
                            Description = "A novel about the American dream and the roaring twenties.",
                            PublisherId = 3,
                            RatingCount = 0,
                            Title = "The Great Gatsby"
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            AvgRating = 0.0,
                            Category = "Adventure",
                            Description = "A sea captain's journey to hunt the white whale, Moby Dick.",
                            PublisherId = 4,
                            RatingCount = 0,
                            Title = "Moby Dick"
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 5,
                            AvgRating = 0.0,
                            Category = "Romance",
                            Description = "A romantic novel that critiques the British landed gentry at the end of the 18th century.",
                            PublisherId = 5,
                            RatingCount = 0,
                            Title = "Pride and Prejudice"
                        },
                        new
                        {
                            Id = 6,
                            AuthorId = 6,
                            AvgRating = 0.0,
                            Category = "Fiction",
                            Description = "A novel about teenage rebellion and angst.",
                            PublisherId = 6,
                            RatingCount = 0,
                            Title = "The Catcher in the Rye"
                        },
                        new
                        {
                            Id = 7,
                            AuthorId = 7,
                            AvgRating = 0.0,
                            Category = "Fantasy",
                            Description = "A fantasy novel about the adventures of Bilbo Baggins.",
                            PublisherId = 7,
                            RatingCount = 0,
                            Title = "The Hobbit"
                        },
                        new
                        {
                            Id = 8,
                            AuthorId = 8,
                            AvgRating = 0.0,
                            Category = "Science Fiction",
                            Description = "A dystopian novel set in a futuristic society.",
                            PublisherId = 8,
                            RatingCount = 0,
                            Title = "Brave New World"
                        },
                        new
                        {
                            Id = 9,
                            AuthorId = 9,
                            AvgRating = 0.0,
                            Category = "Historical Fiction",
                            Description = "A novel that intertwines the lives of five families during the Napoleonic Wars.",
                            PublisherId = 9,
                            RatingCount = 0,
                            Title = "War and Peace"
                        },
                        new
                        {
                            Id = 10,
                            AuthorId = 10,
                            AvgRating = 0.0,
                            Category = "Philosophical Fiction",
                            Description = "A novel about a young shepherd's journey to find treasure.",
                            PublisherId = 10,
                            RatingCount = 0,
                            Title = "The Alchemist"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Cart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FeedbackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FeedbackHeading")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Fine", b =>
                {
                    b.Property<int>("FineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FineId"), 1L, 1);

                    b.Property<double>("FineAmount")
                        .HasColumnType("float");

                    b.Property<double>("FinePending")
                        .HasColumnType("float");

                    b.Property<int>("NumbeOfBooksToPayFine")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfBooksFined")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("FineId");

                    b.HasIndex("UserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("MiniProjectApp.Models.FineDetail", b =>
                {
                    b.Property<int>("FineId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("FineAmount")
                        .HasColumnType("float");

                    b.Property<DateTime?>("FinePaidDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FineId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("FineDetails");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "New York",
                            Country = "USA",
                            PublisherName = "Penguin Random House",
                            State = "NY"
                        },
                        new
                        {
                            Id = 2,
                            City = "New York",
                            Country = "USA",
                            PublisherName = "HarperCollins",
                            State = "NY"
                        },
                        new
                        {
                            Id = 3,
                            City = "New York",
                            Country = "USA",
                            PublisherName = "Simon & Schuster",
                            State = "NY"
                        },
                        new
                        {
                            Id = 4,
                            City = "Paris",
                            Country = "France",
                            PublisherName = "Hachette Livre",
                            State = "Île-de-France"
                        },
                        new
                        {
                            Id = 5,
                            City = "London",
                            Country = "UK",
                            PublisherName = "Macmillan Publishers",
                            State = "Greater London"
                        },
                        new
                        {
                            Id = 6,
                            City = "New York",
                            Country = "USA",
                            PublisherName = "Scholastic",
                            State = "NY"
                        },
                        new
                        {
                            Id = 7,
                            City = "London",
                            Country = "UK",
                            PublisherName = "Pearson",
                            State = "Greater London"
                        },
                        new
                        {
                            Id = 8,
                            City = "Berlin",
                            Country = "Germany",
                            PublisherName = "Springer Nature",
                            State = "Berlin"
                        },
                        new
                        {
                            Id = 9,
                            City = "Boston",
                            Country = "USA",
                            PublisherName = "Cengage",
                            State = "MA"
                        },
                        new
                        {
                            Id = 10,
                            City = "Hoboken",
                            Country = "USA",
                            PublisherName = "Wiley",
                            State = "NJ"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PurchaseId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("MiniProjectApp.Models.PurchaseDetail", b =>
                {
                    b.Property<int>("PurchaseId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("PricePerBook")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Rent", b =>
                {
                    b.Property<int>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RentId"), 1L, 1);

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("BooksRented")
                        .HasColumnType("int");

                    b.Property<int>("BooksToBeReturned")
                        .HasColumnType("int");

                    b.Property<string>("CartType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfRent")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Progress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RentId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");

                    b.HasData(
                        new
                        {
                            RentId = 1,
                            Amount = 15.0,
                            BooksRented = 2,
                            BooksToBeReturned = 1,
                            CartType = "Rent Cart",
                            DateOfRent = new DateTime(2024, 7, 9, 23, 32, 58, 508, DateTimeKind.Local).AddTicks(9188),
                            DueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Progress = "Return pending",
                            UserId = 2
                        },
                        new
                        {
                            RentId = 2,
                            Amount = 0.0,
                            BooksRented = 2,
                            BooksToBeReturned = 1,
                            CartType = "Super Cart",
                            DateOfRent = new DateTime(2024, 7, 9, 23, 32, 58, 508, DateTimeKind.Local).AddTicks(9214),
                            DueDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Progress = "Return pending",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsFined")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("RentCart");

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            BookId = 2,
                            DueDate = new DateTime(2024, 7, 9, 23, 34, 58, 508, DateTimeKind.Local).AddTicks(9251),
                            IsFined = 0,
                            RentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentId = 1
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentDetail", b =>
                {
                    b.Property<int>("RentId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RentId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("RentDetails");

                    b.HasData(
                        new
                        {
                            RentId = 1,
                            BookId = 1,
                            Price = 5.0,
                            ReturnDate = new DateTime(2024, 7, 9, 23, 33, 58, 508, DateTimeKind.Local).AddTicks(9231),
                            status = "Returned"
                        },
                        new
                        {
                            RentId = 1,
                            BookId = 2,
                            Price = 10.0,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "Return pending"
                        },
                        new
                        {
                            RentId = 2,
                            BookId = 3,
                            Price = 0.0,
                            ReturnDate = new DateTime(2024, 7, 9, 23, 33, 58, 508, DateTimeKind.Local).AddTicks(9234),
                            status = "Returned"
                        },
                        new
                        {
                            RentId = 2,
                            BookId = 4,
                            Price = 0.0,
                            ReturnDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            status = "Return pending"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentStock", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.Property<double>("RentPerBook")
                        .HasColumnType("float");

                    b.HasKey("BookId");

                    b.ToTable("RentStocks");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            QuantityInStock = 10,
                            RentPerBook = 5.0
                        },
                        new
                        {
                            BookId = 2,
                            QuantityInStock = 10,
                            RentPerBook = 10.0
                        },
                        new
                        {
                            BookId = 3,
                            QuantityInStock = 10,
                            RentPerBook = 15.0
                        },
                        new
                        {
                            BookId = 4,
                            QuantityInStock = 10,
                            RentPerBook = 8.0
                        },
                        new
                        {
                            BookId = 5,
                            QuantityInStock = 8,
                            RentPerBook = 12.0
                        },
                        new
                        {
                            BookId = 6,
                            QuantityInStock = 10,
                            RentPerBook = 7.0
                        },
                        new
                        {
                            BookId = 7,
                            QuantityInStock = 12,
                            RentPerBook = 6.0
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SaleId"), 1L, 1);

                    b.Property<DateTime>("DateOfSale")
                        .HasColumnType("datetime2");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<double>("FinalAmount")
                        .HasColumnType("float");

                    b.Property<int>("NoOfBooks")
                        .HasColumnType("int");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("SaleId");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("MiniProjectApp.Models.SaleDetail", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Quantity")
                        .HasColumnType("float");

                    b.HasKey("SaleId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("SaleDetails");
                });

            modelBuilder.Entity("MiniProjectApp.Models.SalesStock", b =>
                {
                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<double>("PricePerBook")
                        .HasColumnType("float");

                    b.Property<int>("QuantityInStock")
                        .HasColumnType("int");

                    b.HasKey("BookId");

                    b.ToTable("SalesStocks");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            PricePerBook = 30.0,
                            QuantityInStock = 10
                        },
                        new
                        {
                            BookId = 2,
                            PricePerBook = 50.0,
                            QuantityInStock = 5
                        },
                        new
                        {
                            BookId = 3,
                            PricePerBook = 10.0,
                            QuantityInStock = 10
                        },
                        new
                        {
                            BookId = 4,
                            PricePerBook = 40.0,
                            QuantityInStock = 8
                        },
                        new
                        {
                            BookId = 5,
                            PricePerBook = 60.0,
                            QuantityInStock = 6
                        },
                        new
                        {
                            BookId = 6,
                            PricePerBook = 25.0,
                            QuantityInStock = 12
                        },
                        new
                        {
                            BookId = 7,
                            PricePerBook = 20.0,
                            QuantityInStock = 15
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.SuperRentCart", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("BookId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IsFined")
                        .HasColumnType("int");

                    b.Property<DateTime>("RentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("SuperRentCart");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            BookId = 4,
                            DueDate = new DateTime(2024, 7, 9, 23, 34, 58, 508, DateTimeKind.Local).AddTicks(9266),
                            IsFined = 0,
                            RentDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RentId = 2
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Spidey",
                            Phone = "8378499039",
                            Role = "Admin",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Peter Parker",
                            Phone = "8293377843",
                            Role = "User",
                            Status = "Active"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ben Parker",
                            Phone = "3847299304",
                            Role = "Premium User",
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.UserCredential", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<byte[]>("HashKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("UserId");

                    b.ToTable("UserCredentials");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            HashKey = new byte[] { 120, 121, 122 },
                            Password = new byte[] { 115, 116, 114, 105, 110, 103 }
                        },
                        new
                        {
                            UserId = 2,
                            HashKey = new byte[] { 120, 121, 122 },
                            Password = new byte[] { 115, 116, 114, 105, 110, 103 }
                        },
                        new
                        {
                            UserId = 3,
                            HashKey = new byte[] { 120, 121, 122 },
                            Password = new byte[] { 115, 116, 114, 105, 110, 103 }
                        });
                });

            modelBuilder.Entity("MiniProjectApp.Models.Book", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Cart", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Feedback", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Fine", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.FineDetail", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.Fine", "Fine")
                        .WithMany("FineDetailsList")
                        .HasForeignKey("FineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Fine");
                });

            modelBuilder.Entity("MiniProjectApp.Models.PurchaseDetail", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.Purchase", "Purchase")
                        .WithMany("PurchaseDetailsList")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Rent", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentCart", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany("RentCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentDetail", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.Rent", "Rent")
                        .WithMany("RentDetailsList")
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("MiniProjectApp.Models.RentStock", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Sale", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.SaleDetail", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.Sale", "Sale")
                        .WithMany("SaleDetailList")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("MiniProjectApp.Models.SalesStock", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("MiniProjectApp.Models.SuperRentCart", b =>
                {
                    b.HasOne("MiniProjectApp.Models.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany("SuperRentCartItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.UserCredential", b =>
                {
                    b.HasOne("MiniProjectApp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Fine", b =>
                {
                    b.Navigation("FineDetailsList");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Purchase", b =>
                {
                    b.Navigation("PurchaseDetailsList");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Rent", b =>
                {
                    b.Navigation("RentDetailsList");
                });

            modelBuilder.Entity("MiniProjectApp.Models.Sale", b =>
                {
                    b.Navigation("SaleDetailList");
                });

            modelBuilder.Entity("MiniProjectApp.Models.User", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("RentCartItems");

                    b.Navigation("SuperRentCartItems");
                });
#pragma warning restore 612, 618
        }
    }
}
